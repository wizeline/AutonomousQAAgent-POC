{
  "name": "AQAMainWorkflow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1056,
        1520
      ],
      "id": "11f00d64-3f7f-4a86-826c-1532e6ec612a",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1",
              "name": "owner",
              "value": "wizeline",
              "type": "string"
            },
            {
              "id": "2",
              "name": "repo",
              "value": "BytescribeTeam",
              "type": "string"
            },
            {
              "id": "3",
              "name": "branch",
              "value": "main",
              "type": "string"
            },
            {
              "id": "4",
              "name": "processingMode",
              "value": "batch",
              "type": "string"
            },
            {
              "id": "5",
              "name": "batchSize",
              "value": 10,
              "type": "number"
            },
            {
              "id": "6",
              "name": "fetchFileContent",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "7",
              "name": "maxFilesToProcess",
              "value": 50,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "56221037-9275-43fe-b4e7-874efae3176c",
      "name": "Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -800,
        1520
      ],
      "notes": "Set processingMode to:\n- 'batch' for faster batch processing\n- 'individual' for detailed file-by-file analysis\n\nSet fetchFileContent to true to get actual code content\nAdjust maxFilesToProcess and batchSize as needed"
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/branches/{{ $json.branch }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubOAuth2Api",
        "options": {}
      },
      "id": "940b1aab-fab0-4c03-843e-094293902565",
      "name": "Get Branch Info",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -608,
        1520
      ],
      "credentials": {
        "githubOAuth2Api": {
          "id": "pL0LLeAtN51Ziw2K",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $('Configuration').item.json.owner }}/{{ $('Configuration').item.json.repo }}/git/trees/{{ $json.commit.sha }}?recursive=1",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubOAuth2Api",
        "options": {}
      },
      "id": "8fa69a08-0d99-42c1-bfae-f752c3491c71",
      "name": "Get Repository Tree",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -416,
        1520
      ],
      "credentials": {
        "githubOAuth2Api": {
          "id": "pL0LLeAtN51Ziw2K",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract file tree from GitHub API response\nconst treeData = $input.first().json.tree;\nconst config = $('Configuration').first().json;\nconst owner = config.owner;\nconst repo = config.repo;\nconst branch = config.branch;\nconst maxFiles = config.maxFilesToProcess || 100;\n\n// Define testable file extensions by language/framework\nconst testableExtensions = {\n  javascript: ['.js', '.jsx', '.mjs', '.cjs'],\n  typescript: ['.ts', '.tsx'],\n  python: ['.py'],\n  java: ['.java', '.kt', '.kts'],\n  csharp: ['.cs'],\n  go: ['.go'],\n  ruby: ['.rb'],\n  php: ['.php'],\n  rust: ['.rs'],\n  swift: ['.swift'],\n  cpp: ['.c', '.cpp', '.cc', '.cxx', '.h', '.hpp'],\n  scala: ['.scala'],\n  vue: ['.vue'],\n  svelte: ['.svelte']\n};\n\nconst allTestableExtensions = Object.values(testableExtensions).flat();\n\nconst excludePaths = [\n  'test', 'tests', '__tests__', 'spec', 'specs',\n  'node_modules', 'vendor', 'dist', 'build', 'out',\n  '.git', '.github', '.vscode', '.idea',\n  'coverage', 'docs', 'documentation',\n  'examples', 'demo', 'samples'\n];\n\nconst excludeFilenames = [\n  'jest.config', 'webpack.config', 'babel.config',\n  'tsconfig', 'eslint', 'prettier',\n  '.test.', '.spec.', '_test.', '_spec.',\n  'test.', 'spec.', 'mock', 'fixture'\n];\n\nconst sourceFiles = treeData\n  .filter(item => {\n    if (item.type !== 'blob') return false;\n    \n    const path = item.path.toLowerCase();\n    const filename = path.split('/').pop();\n    \n    const hasTestableExt = allTestableExtensions.some(ext => \n      item.path.endsWith(ext)\n    );\n    if (!hasTestableExt) return false;\n    \n    const isInExcludedPath = excludePaths.some(excluded => \n      path.includes('/' + excluded.toLowerCase() + '/') || \n      path.startsWith(excluded.toLowerCase() + '/')\n    );\n    if (isInExcludedPath) return false;\n    \n    const hasExcludedPattern = excludeFilenames.some(pattern => \n      filename.includes(pattern.toLowerCase())\n    );\n    if (hasExcludedPattern) return false;\n    \n    if (item.size && item.size > 500000) return false;\n    \n    return true;\n  })\n  .slice(0, maxFiles)  // Limit based on config\n  .map(file => {\n    let language = 'unknown';\n    for (const [lang, exts] of Object.entries(testableExtensions)) {\n      if (exts.some(ext => file.path.endsWith(ext))) {\n        language = lang;\n        break;\n      }\n    }\n    \n    return {\n      path: file.path,\n      sha: file.sha,\n      size: file.size,\n      url: file.url,\n      language: language,\n      owner: owner,\n      repo: repo,\n      branch: branch\n    };\n  });\n\nconst filesByLanguage = sourceFiles.reduce((acc, file) => {\n  if (!acc[file.language]) {\n    acc[file.language] = [];\n  }\n  acc[file.language].push(file);\n  return acc;\n}, {});\n\nconst languageStats = Object.entries(filesByLanguage).map(([lang, files]) => ({\n  language: lang,\n  count: files.length,\n  totalSize: files.reduce((sum, f) => sum + (f.size || 0), 0)\n}));\n\nreturn [{\n  json: {\n    owner,\n    repo,\n    branch,\n    processingMode: config.processingMode,\n    fetchFileContent: config.fetchFileContent,\n    batchSize: config.batchSize,\n    totalFiles: treeData.length,\n    sourceFilesCount: sourceFiles.length,\n    sourceFiles: sourceFiles,\n    filesByLanguage: filesByLanguage,\n    languageStats: languageStats,\n    repositoryUrl: `https://github.com/${owner}/${repo}`\n  }\n}];"
      },
      "id": "c7e0afaf-b17f-40bd-b03e-97019a1f3cee",
      "name": "Process File Structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        1520
      ]
    },
    {
      "parameters": {
        "jsCode": "return $input.first().json.filesByLanguage.python;"
      },
      "id": "0c2854f0-3c40-436d-aa13-ba3d0babb3d7",
      "name": "Get python file list",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        1520
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        208,
        1520
      ],
      "id": "45801d16-66c6-4948-87ac-d74f2819791d",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Loop over input items and add a new field called 'myNewField' to the JSON of each one\n# for item in _input.all():\n#   item.json.myNewField = 1\n# return _input.all()\n\nreturn \"constructing...\""
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        1376
      ],
      "id": "427b70ad-baf4-4eba-9286-4ee9cc160dd1",
      "name": "Code in Python (Beta)"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "HWexi0gllKkn87jk",
          "mode": "list",
          "cachedResultUrl": "/workflow/HWexi0gllKkn87jk",
          "cachedResultName": "AgentReadFileFromRepo"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {}
        },
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        416,
        1616
      ],
      "id": "9a27b335-439c-4eb1-80b9-452949181744",
      "name": "Call 'AgentReadFileFromRepo'"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configuration": {
      "main": [
        [
          {
            "node": "Get Branch Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Branch Info": {
      "main": [
        [
          {
            "node": "Get Repository Tree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Repository Tree": {
      "main": [
        [
          {
            "node": "Process File Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process File Structure": {
      "main": [
        [
          {
            "node": "Get python file list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get python file list": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Code in Python (Beta)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call 'AgentReadFileFromRepo'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'AgentReadFileFromRepo'": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5b12e3b7-6bea-4ab1-9faf-862d58207911",
  "meta": {
    "instanceId": "e19bcd79288ba32d5b00c6bcd097856e2fdca4230440ae71d65e560d4587140f"
  },
  "id": "EPrKDxAj2VPWE44u",
  "tags": []
}